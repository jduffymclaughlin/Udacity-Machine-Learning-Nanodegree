import random
import numpy as np

class test():
    def __init__(self):
        self.Q = {}
        self.valid_actions = ['action1', 'action2', 'action3', 'action4']


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        if state not in self.Q.keys():
            self.Q[state] = {action: .42 for action in self.valid_actions}

    def maxQ(self, state):

        actions = self.Q[state]
        act, maxQ = random.choice(actions.keys()), -np.inf

        choices = []
        for a, v in zip(actions.keys(), actions.values()):
            if v > maxQ:
                maxQ = v
                choices = [(a, v)]
            elif v == maxQ:
                choices.append((a, v))
        return random.choice(choices)






def main():
    t = test()
    states = ['state1', 'state2', 'state3']
    for state in states:
        t.createQ(state)

    print(t.Q)

    act, maxq = t.maxQ('state2')
    print(maxq, act)
main()
